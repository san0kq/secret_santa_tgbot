import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types.message import Message
from aiogram.types import CallbackQuery
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from random import choice

from src.database.user import (
    get_all_participants,
    add_user,
    get_free_participants,
    restart_all,
    fetch_user_db,
    set_santa_user_db,
    set_selected_participant_db,
)
from src.database.initialize import initialize_db_data
from src.settings import API_TOKEN, ADMIN_ID
from src.tools import message_delete
from src.callback import ParticipantCallbackData

main_router = Router()
logger = logging.getLogger(__name__)
dp = Dispatcher()
dp.include_router(main_router)


@main_router.message(Command("start"))
@main_router.callback_query(ParticipantCallbackData.filter(F.action == 'menu'))
async def cmd_start(
    event: Message | types.CallbackQuery,
    callback: ParticipantCallbackData = None,
    state: FSMContext = None
):
    if isinstance(event, CallbackQuery):
        event = event.message

    user_id = event.from_user.id

    if user := await fetch_user_db(user_id=user_id):
        if not user.is_santa:
            await state.update_data(
                participant_name=user.name,
                participant_id=user.participant_id
            )
            await add_participant(event=event, state=state)
            return None
        else:
            message_text = 'ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å. –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–µ –∑–∞–±—ã–ª–∏ –µ–≥–æ –∏–º—è.'
            builder = InlineKeyboardBuilder()
    else:
        participants = await get_all_participants()
        builder = InlineKeyboardBuilder()
        if participants:
            message_text = 'üéÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞! üéÑ'
            for participant in participants:
                builder.button(
                    text=participant.name,
                    callback_data=ParticipantCallbackData(
                        name=participant.name,
                        id=participant.id,
                        action='choice').pack()
                )
            builder.adjust(1, 1)
        else:
            message_text = 'ü§∑‚Äç‚ôÇÔ∏è –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –≤ –∏–≥—Ä–µ.\n\nüéâ –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º!'

    if isinstance(event, Message):
        await event.answer(
            text=message_text,
            reply_markup=builder.as_markup(),
            disable_notification=True,
            parse_mode=ParseMode.HTML
        )
        await message_delete(event)
    else:
        await event.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )


@main_router.callback_query(ParticipantCallbackData.filter(F.action == "choice"))
async def choice_participant(query: CallbackQuery, callback_data: ParticipantCallbackData):
    builder = InlineKeyboardBuilder()
    participant_name = callback_data.name
    participant_id = callback_data.id

    message_text = f'‚ùÑÔ∏è {participant_name} ‚ùÑÔ∏è\n\n‚òÉÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚òÉÔ∏è'
    builder.button(
        text=f'‚úÖ {participant_name}',
        callback_data=ParticipantCallbackData(action='add', name=participant_name, id=participant_id)
    )
    builder.button(
        text="‚ùå –ù–µ—Ç, —è –æ—à–∏–±—Å—è",
        callback_data=ParticipantCallbackData(action='menu', name=None, id=None)
    )
    builder.adjust(2, 1)
    await query.message.edit_text(text=message_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)


@main_router.callback_query(ParticipantCallbackData.filter(F.action == "add"))
async def add_participant(event: Message | CallbackQuery, callback_data: ParticipantCallbackData = None, state: FSMContext = None):
    user_id = event.from_user.id
    builder = InlineKeyboardBuilder()
    if callback_data:
        participant_name = callback_data.name
        participant_id = callback_data.id

        await add_user(participant_id=participant_id, user_id=user_id)
    else:
        state_data = await state.get_data()
        participant_name = state_data.get('participant_name')
        participant_id = state_data.get('participant_id')

    logger.info(f'{participant_id}, {participant_name}')
    message_text = f'üéÖ –ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ, <b>{participant_name}</b>! üéÖ\n\n –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üéÅ –í–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å"'
    builder.button(
        text='üéÅ –í–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å...',
        callback_data=ParticipantCallbackData(action='get', name=None, id=participant_id)
    )
    builder.adjust(1, 1)
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text=message_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    else:
        await event.answer(
            text=message_text,
            reply_markup=builder.as_markup(),
            disable_notification=True,
            parse_mode=ParseMode.HTML
        )
        await message_delete(event)


@main_router.callback_query(ParticipantCallbackData.filter(F.action == "get"))
async def get_participant(event: Message | CallbackQuery, callback_data: ParticipantCallbackData = None):
    user_id = event.from_user.id
    builder = InlineKeyboardBuilder()
    participant_id = callback_data.id
    logger.info(participant_id)

    participants = await get_free_participants(participant_id=participant_id)
    if participants:
        random_participant = choice(participants)
        participant_name = random_participant.name
        message_text = (
            f'üéÅ –í–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å - <b>{participant_name}</b>!\n\n‚ùóÔ∏è '
            f'–ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ –∏–º—è, –∞ –ª—É—á—à–µ –∑–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∫—É–¥–∞-–Ω–∏–±—É–¥—å. '
            f'–ë–æ–ª—å—à–µ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ –∏–º—è –∏–∑ –±–æ—Ç–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç, –≤ —Ç–æ–º '
            f'—á–∏—Å–ª–µ –∏ –≤—ã.\n\n üéÑ –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º! üéÑ'
        )
        await set_santa_user_db(user_id=user_id)
        await set_selected_participant_db(participant_id=random_participant.id)
        photo = FSInputFile('src/images/secret_santa.png')
        await event.message.answer_photo(
            photo=photo,
            caption=message_text,
            reply_markup=builder.as_markup(),
            disable_notification=True,
            parse_mode=ParseMode.HTML
        )
        await message_delete(event)

    else:
        message_text = 'ü§∑‚Äç‚ôÇÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.'

        if isinstance(event, CallbackQuery):
            await event.message.edit_text(text=message_text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
        else:
            await event.answer(
                text=message_text,
                reply_markup=builder.as_markup(),
                disable_notification=True,
                parse_mode=ParseMode.HTML
            )
            await message_delete(event)


@main_router.message(Command("restart"))
async def cmd_restart(
    message: Message,
    state: FSMContext = None
):
    user_id = message.from_user.id

    if str(user_id) != ADMIN_ID:
        logger.info(f'{user_id} != {ADMIN_ID}')
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
        return

    await restart_all()

    await message.answer('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')


async def main():
    bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
    await initialize_db_data()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
